<script>
  import throttle from 'lodash.throttle';

  const onResizeThrottle = throttle(onResize, 500);
  window.addEventListener('resize', onResizeThrottle);

  const COLORS = [
    '#141414',
    '#191919',
    '#1F1F1F',
    '#242424',
    '#292929',
    '#2E2E2E',
    '#333333',
    '#383838',
    '#3D3D3D',
    '#424242',
    '#474747',
    '#4D4D4D',
    '#525252'
  ];

  const canvas = document.querySelector('#background-canvas') as HTMLCanvasElement;

  function onResize() {
    const resolution = getDrawResolution();
    if (isCanvasNeedRefresh(canvas, resolution)) {
      draw();
    }
  }

  function isCanvasNeedRefresh(source: ReturnType<typeof getDrawResolution>, resolution: ReturnType<typeof getDrawResolution>) {
    return source.width < resolution.width || source.height < resolution.height;
  }

  onResizeThrottle();

  function randomInteger(min: number, max: number): number {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  function getIndexColor(indexCell: number, squaresPerLine: number, lastIndexColor: number, previousLine: number[]): number {
    const offset = randomInteger(-2, 2);
    if (Math.random() > 0.4) {
      // reprend une couleur de la ligne du dessus
      if (indexCell + offset < 0) {
        return previousLine[Math.floor(Math.random() * squaresPerLine)];
      } else if (indexCell + offset > squaresPerLine - 1) {
        return previousLine[squaresPerLine - 1];
      } else {
        return previousLine[indexCell + offset];
      }
    } else if (lastIndexColor + offset < 0) {
      // remonte le tableau par la fin
      return (lastIndexColor + offset) * -1;
    } else if (lastIndexColor + offset >= COLORS.length) {
      // recommence en partant de la fin du tableau
      return COLORS.length - 1 - (lastIndexColor + offset - (COLORS.length - 1));
    } else {
      return lastIndexColor + offset;
    }
  }

  function calcMatrix(resolution: ReturnType<typeof getDrawResolution>, squareSize: number) {
    const index = { x: 0, y: 0 };
    const squaresPerLine = Math.ceil(resolution.width / squareSize) + 1;
    const nbLines = Math.ceil(resolution.height / squareSize) + 1;
    const previousLine = [] as number[];
    const table = [] as number[][];
    let lastIndexColor = 0;
    // init first line with random colors
    for (index.x = 0; index.x < squaresPerLine; index.x += 1) {
      previousLine[index.x] = Math.floor(Math.random() * COLORS.length);
    }
    // calc all lines
    for (index.y = 0; index.y < nbLines; index.y += 1) {
      for (index.x = 0; index.x < squaresPerLine; index.x += 1) {
        const indexColor = getIndexColor(index.x, squaresPerLine, lastIndexColor, previousLine);
        previousLine[index.x] = indexColor;
        lastIndexColor = indexColor;
      }
      table.push([...previousLine]);
    }
    return { squareSize, table };
  }

  function getDrawResolution() {
    return { width: window.innerWidth, height: window.innerHeight };
  }

  async function draw() {
    const ctx = canvas.getContext('2d');
    const resolution = getDrawResolution();
    canvas.width = resolution.width;
    canvas.height = resolution.height;

    let squareSize = 128;
    const matrices: { squareSize: number; table: number[][] }[] = [];
    while (squareSize >= 4) {
      matrices.push(calcMatrix(resolution, squareSize));
      squareSize = Math.round(squareSize / 2);
    }

    const PALETTES = {} as Record<number, HTMLCanvasElement[]>;
    for (const matrix of matrices) {
      // draw offset canvas for caching square bitmap for every size
      PALETTES[matrix.squareSize] = COLORS.map((color) => {
        const canvas = document.createElement('canvas');
        canvas.width = matrix.squareSize;
        canvas.height = matrix.squareSize;
        const ctx = canvas.getContext('2d');
        ctx!.fillStyle = color;
        ctx!.fillRect(0, 0, matrix.squareSize, matrix.squareSize);
        return canvas;
      });

      let poolOfSquares = 0;
      for (const [y, row] of matrix.table.entries()) {
        // stop render old resolution
        if (isCanvasNeedRefresh(resolution, getDrawResolution())) {
          return;
        }

        const rowMapped = row.map((indexColor, x) => {
          return { indexColor, x, y };
        });

        while (rowMapped.length) {
          const cell = rowMapped.splice(Math.floor(Math.random() * rowMapped.length), 1)[0];
          ctx!.drawImage(PALETTES[matrix.squareSize][cell.indexColor], cell.x * matrix.squareSize, cell.y * matrix.squareSize);
          if (poolOfSquares > 50 + 1000 / matrix.squareSize) {
            await new Promise((resolve) => {
              requestAnimationFrame(resolve);
            });
            poolOfSquares = 0;
          } else {
            poolOfSquares += 1;
          }
        }
      }
    }
  }
</script>

<style>
  #background-canvas {
    image-rendering: pixelated;
  }
</style>

<canvas
  class="fixed z-0"
  id="background-canvas"></canvas>
